---
title: "Class 13: Transcriptomics and the analysis of RNA-Seq data"
author: "Liana Melikian"
format: pdf
---

```{r}
library(BiocManager)
library(DESeq2)
```

##Import countData and colData
```{r}
# Complete the missing code
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

```{r}
head(counts)
head(metadata)
```
Q1. We have 38694 genes.
```{r}
nrow(counts)
```

Q2 We have 4 "control" cell lines.
```{r}
View(metadata)
```

##Toy differential gene expression

Let's start by calculating the mean counts per genes in the "control" samples. We can then compare this value for each gene to the mean counts in the "treated" samples (i.e. columns).

-Step 1. Find which columns in `counts` correspond to "control" samples.
-Step 2. Calculate the mean value per gene in these columns.
-Step 3. Store my answer for late in `control.mean   `
```{r}
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
control.mean <- rowSums( control.counts )/4 
head(control.mean)
```
Q3. We can use `rowSums()` to make the code approach more robust.

```{r}
control.inds=metadata$dex == "control"
```

```{r}
control.inds=metadata$dex=="control"
```

```{r}
metadata[control.inds,]
```

```{r}
control.counts=counts[,control.inds]
head(control.counts)
```
```{r}
#apply(control.counts,1,mean)
control.mean=rowMeans(control.counts)
```

Q4.
Now do the same steps to get `treated.mean`
```{r}
treated.mean=rowMeans(counts[,metadata$dex == "treated"])
```

To keep us tidy lets put `control.mean` and `treated.mean` vectors together as two columns of a new data.frame.
```{r}
meancounts=data.frame(control.mean, treated.mean)
```

```{r}
head(meancounts)
```

Q5(a).
```{r}
plot(meancounts)
```

And a ggplot version:

```{r}
library(ggplot2)
ggplot(meancounts)+
  aes(control.mean,treated.mean)+
  geom_point(alpha=.2)
```

Q5(b). geom_point

Q6.
```{r}
plot(meancounts,log="xy")
```

```{r}
ggplot(meancounts)+
  aes(control.mean,treated.mean)+
  geom_point()+
  scale_x_continuous(trans="log2")+
  scale_y_continuous(trans="log2")
```

Log transformations are super useful when our data is skewed and measured over a wide range like this. We can use different log transformations like base10 or natural logs but we most often prefer log2 units.

```{r}
#Control/Treated
log2(10/10)
```

What if there was a doubling?
```{r}
#Treated/control
log2(20/10)
```

Half counts
```{r}
log2(10/20)
```

```{r}
log2(40/10)
```

Let's add a log2 fold-change column to our little `meancounts` data.frame:
```{r}
meancounts$log2fc=log2(meancounts$treated.mean/meancounts$control.mean)
head(meancounts)
```
There are a couple of weird results.
The `!` flips TRUE values to FALSE and vice versa
```{r}
to.rm.inds=rowSums(meancounts[,1:2] == 0) > 0
mycounts=meancounts[!to.rm.inds,]
```

```{r}
dim(mycounts)
head(mycounts)
```
Q7. The arr.ind = TRUE argument in which() retrieves row and column indices where there are TRUE values. Using unique(zero.vals[, 1]) ensures only unique row indices with zero counts in at least one sample are selected for removal, focusing on rows without zero counts in both specified columns.

```{r}
head(mycounts)
```

A common threshold used for calling something differentially expressed is a log2(FoldChange) of greater than 2 or less than -2. Letâ€™s filter the dataset both ways to see how many genes are up or down-regulated.


```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
```

Q8. 250 up-regulated genes
```{r}
sum(up.ind)
```

Q9. 367 down-regulated genes
```{r}
sum(down.ind)
```

Q10.
No, we haven't considered the statistical significance of the differences in fold changes.

We will use the DESeq2 package to do this analysis properly.

##Setting up for DESeq
We must load it up with a `library()` call.
```{r}
library(DESeq2)
citation("DESeq2")
```

```{r}
dds=DESeqDataSetFromMatrix(countData=counts,
                       colData=metadata,
                       design= ~dex)
dds
```
Now we can run our DESeq analysis
```{r}
dds=DESeq(dds)
```
Get our results back from the `dds` object.
```{r}
dds=DESeq(dds)
results(dds)
```
##PCA
```{r}
vsd <- vst(dds, blind = FALSE)
plotPCA(vsd, intgroup = c("dex"))
```

```{r}
pcaData <- plotPCA(vsd, intgroup=c("dex"), returnData=TRUE)
head(pcaData)
```

```{r}
# Calculate percent variance per PC for the plot axis labels
percentVar <- round(100 * attr(pcaData, "percentVar"))
```

```{r}
ggplot(pcaData) +
  aes(x = PC1, y = PC2, color = dex) +
  geom_point(size =3) +
  xlab(paste0("PC1: ", percentVar[1], "% variance")) +
  ylab(paste0("PC2: ", percentVar[2], "% variance")) +
  coord_fixed() +
  theme_bw()
```

##DESeq Analysis

```{r}
results(dds)
```

```{r}
dds <- DESeq(dds)
```

```{r}
res <- results(dds)
res
```

```{r}
summary(res)
```

```{r}
res05 <- results(dds, alpha=0.05)
summary(res05)
```
##Data Visualization

Volcano plot.
This is a common type of summary figure that keep both our inner biologist and inner stats nerd happy because it shows both P-values and Log2(Fold-Changes).

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
      xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")
```


```{r}
plot(res$log2FoldChange, -log(res$padj))
abline(v=2,col="red")
abline(v=-2,col="red")
abline(h=-log(0.05),col="blue")
```

```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```

```{r}
library(EnhancedVolcano)
```

```{r}
res=results(dds)
```

```{r}
x <- as.data.frame(res)

#EnhancedVolcano(x,
    #lab = x$symbol,
   # x = 'log2FoldChange',
  #  y = 'pvalue')
```

Save our results to date
```{r}
#write.csv(res,fule="deseq-results.csv")
```

```{r}
head(res)
```
##Adding annotation data

```{r}
library("AnnotationDbi")
```

```{r}
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```

The main function we will use here is called `mapIDs()`

Our current IDs are here:
```{r}
#mapIDs()
head(rownames(res))
```

Q11.
These are in ENSEMBLE format. I want "SYMBOL" ids.

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="SYMBOL",     # The new format we want to add
                     multiVals="first")
head(res)
```

Let's add GENENAME
```{r}
res$genename = mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="SYMBOL",     # The new format we want to add
                     multiVals="first")
head(res)
```

```{r}
res$entrez=mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="SYMBOL",     # The new format we want to add
                     multiVals="first")
head(res)
```

##Pathway analysis

We will use the **gage** package along with **pathview** here to do geneset enrichment (aka pathway analysis) and figure generation respectively.

```{r}
#| message: false
library(pathview)
library(gage)
library(gageData)
```

Let's have a peak at the first two pathways in KEGG.
```{r}
data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```
What we need for `gage()` is our genes in ENTREZ id format with a measure of their importance.

It wants a vector of e.g. fold-changes.
```{r}
foldchanges = res$log2FoldChange
head(foldchanges)
```

Add ENTREZ ids as `names()` to my `foldchanges` vector.
```{r}
names(foldchanges)=res$entrez
head(foldchanges)
```

Now we can run `gage()` with this input vector and the genset we want to examine for overlap/enrichment.

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

Look at the results.
```{r}
attributes(keggres)
```

```{r}
head(keggres$less,3)
```

We can view these pathways with our geneset genes highlighted using the `pathview()` function. E.g. for "Asthma" I will use the pathway.id hs05310 as seen above.
```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![](hsa05310.pathview.png)













